#!/usr/bin/env python
"""
Created on Thu Apr 27 11:24:22 2017

@author: Jonathan Lym
"""

import argparse
#from warnings import warn
from os import getcwd, chdir
from os.path import isdir, exists

#Parse arguments
parser = argparse.ArgumentParser(description = "Checks the paths in joblist.txt and folderlist.txt to ensure they exist for Job Array Submission.")
parser.add_argument("job_file", nargs='?', default = './joblist.txt', help = "File that contains job names.")
parser.add_argument("folder_file", nargs='?', default = './folderlist.txt', help = "File that contains paths to jobs.")
parser.add_argument("-c", "--change", action = 'store_true', default = False, help = "Changes job array True entries to False")
args = parser.parse_args()
job_file = args.job_file
folder_file = args.folder_file

home_dir = getcwd()
j = 0
k = 0
l = 0
correct_job_newline = True
correct_folder_newline = True

with open(job_file, 'rb') as job_ptr, open(folder_file, 'rb') as folder_ptr:
    for i, (job, folder) in enumerate(zip(job_ptr, folder_ptr)):
        #Check if file contains Windows carriage return characters
        if b'\r' in job and correct_job_newline:
            print('{} contains Windows carriage return characters. Convert using dos2unix {}'.format(job_file, job_file))
            correct_job_newline = False
        if b'\r' in folder and correct_folder_newline:
            print('{} contains Windows carriage return characters. Convert using dos2unix {}'.format(folder_file, folder_file))
            correct_folder_newline = False
        #Convert binary string to regular string
        job = job.decode()
        folder = folder.decode()

        #Check if folder exists
        job = job.replace('\n', '')
        folder = folder.replace('\n', '')
        folder_exists = isdir(folder)
        if folder_exists:
            chdir(folder)
            job_exists = exists('{}.py'.format(job))
            if job_exists:
                test_run_on = False
                lines_out = []
                with open('{}.py'.format(job), 'r') as f_ptr:
                    for line in f_ptr:
                        if 'testRun = True' in line:
                            print('Line {}  testRun = True for job {}.py at {}'.format(i+1, job, folder))
                            test_run_on = True
                        
                        if args.change:
                            lines_out.append(line.replace('testRun = True', 'testRun = False'))
                            
                if test_run_on:
                    j += 1
                    if args.change:
                        with open('{}.py'.format(job), 'w') as f_ptr:
                            f_ptr.write(''.join(lines_out))
            else:
                print('Line {}  Job {}.py does not exist at {}.'.format(i+1, job, folder))
                k += 1
        else:
            print('Line {}  Folder {} does not exist.'.format(i+1, folder))
            l += 1
        chdir(home_dir)
print('-'*10)
print('Summary:')
print('\t{} has correct newline character: {}'.format(job_file, correct_job_newline))
print('\t{} has correct newline character: {}'.format(folder_file, correct_folder_newline))
print('\tTotal # jobs: {}'.format(i+1))
print('\ttestRun = True: {}'.format(j))
print('\tInvalid Job: {}'.format(k))
print('\tInvalid Folder: {}'.format(l))
