#!/usr/bin/env python

import argparse
import os

parser = argparse.ArgumentParser(description='Submits a Chemkin job to the queueing system on Squidward')
parser.add_argument('path', nargs = '?', type = str, default = '.', help = 'Location in which INP.d file is located. Default is the current directory')
parser.add_argument('name', nargs = '?' type = str, default = None, help = 'Name of job. Default is the name of the folder it is in.')
parser.add_argument('-v', '--version', nargs = '?', type = str, default ='113', help = 'Version of Chemkin to use. Default is 113')
parser.add_argument('-s', '--submit', action = 'store_true', default = False, help = 'Submits job to queue without qsub command.')
parser.add_argument('-n', 'n_cores', nargs = '?', type = str, default = '1', help = 'Number of cores. Default is 1.')

args = parser.parse_args()
path = args.path
name = args.name
version = args.version
submit = args.submit
n_cores = args.n_cores
email = os.environ['EMAIL']

template = """#!/bin/bash
#$ -cwd
#$ -j y
#$ -S /bin/bash
#$ -pe openmpi-mx __n_cores
#$ -q *@@3rd_gen
#$ -m beas
#$ -M __email
#  This script is designed to copy input and output files into a unique
#+ directory within the parent directory in order to facilitate 
#+ keeping track of individual job runs. This should allow a user to
#+ recreate a given run with a minimum amount of effort. The user may
#+ optionally specify a name for the output directory as a command-line
#+ argument, or the script will supply a default based on the current
#+ date and time.
#+ Initially written by Jonathan E. Sutton, Vlachos Research Group,
#+ University of Delaware, 2012/08/23.
#+ Last updated: 2013/11/26.

#  Define the path to the binary. For testing, this will be the local directory,
#+ but for production runs, this will be the location of the compiled binary
#+ on the server/cluster.
CKPATH='/opt/shared/home/vlachos/hezgi/chemkin/__version'

#Convert all tabs to spaces in the input directory files
cd INP.d
for i in *; do
  sed -i 's/	/  /g' "$i" #First whitespace character is a literal tab
done
cd ..

#Create the output directory if needed
if [ ! -d "OUT.d" ]; then
  mkdir "OUT.d"
fi

#Remove old linking files, etc. and redirect error messages to /dev/null
#in order to suppress them.
rm INP.d/*link 2> /dev/null
rm OUT.d/* 2> /dev/null

#Prepare the model input
echo 'Preparing Chemkin binary linking files'
"$CKPATH/CHEMKIN.d/ckinterp.x"
"$CKPATH/CHEMKIN.d/skinterp.x"

echo 'Checking gas.inp'
grep -q "NO ERRORS" OUT.d/gas.out
if [ $? -ne 0 ]; then
  echo 'There is an error in gas.inp, exiting'
  exit
else
  echo 'No errors found in gas.inp'
fi

echo 'Checking surf.inp'
grep -q "NO ERRORS" OUT.d/surf.out
if [ $? -ne 0 ]; then
  echo 'There is an error in surf.inp, exiting'
  exit
else
  echo 'No errors found in surf.inp'
fi

echo 'Running model'
"$CKPATH""/reactors.x"
echo 'Done running model'
"""

abs_path = os.path.abspath(path)
if name is None:
    name = os.path.dirname(abs_path)
qs_name = '{}.qs'.format(name)

print 'Writing script with options:'
print '\tPath = {}'.format(os.path.abspath(path))
print '\tName of job = {}'.format(name)
print '\tVersion = {}'.format(version)
print '\tn_cores = {}'.format(n_cores)
print '\tE-mail = {}'.format(email)

with open(os.path.join(path, qs_name), 'w') as script_ptr:
    script_ptr.write(template.replace('__email', email).replace('__version', version).replace('__n_cores', n_cores))

if submit:
    os.system('qsub {}'.format(path, qs_name))
    print 'Successfully submitted {}'.format(qs_name)
else:
print 'Don\'t forget to submit using qsub {}!'.format(qs_name)