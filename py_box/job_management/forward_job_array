#!/usr/bin/env python
"""
Created on Thu Apr 27 11:24:22 2017

@author: Jonathan Lym
"""

import argparse
from warnings import warn
from os import getcwd, chdir
from os.path import isdir, exists

#Parse arguments
parser = argparse.ArgumentParser(description = "Checks the paths in specified by job_in and folder_in and writes the unfinished jobs to job_out and folder_out.")
parser.add_argument("job_in", nargs='?', default = './joblist.txt', help = "File that holds the input jobs.")
parser.add_argument("folder_in", nargs='?', default = './folderlist.txt', help = "File that contains paths to input jobs.")
parser.add_argument("job_out", nargs='?', default = './joblist_out.txt', help = "File that uncompleted jobs will be written to.")
parser.add_argument("folder_out", nargs='?', default = './folderlist_out.txt', help = "File that paths to incomplete jobs will be written to.")
parser.add_argument("-a", "-all", action='store_true', help = "If specified, jobs that have not run as yet will be written to the output files.")
args = parser.parse_args()
job_in = args.job_in
folder_in = args.folder_in
job_out = args.job_out
folder_out = args.folder_out
write_all = args.all

i = 0
home_dir = getcwd()
with open(job_in, 'r') as job_in_ptr, \
        open(folder_in, 'r') as folder_in_ptr,\
        open(job_out, 'w') as job_out_ptr,\
        open(folder_out, 'w') as folder_out_ptr:
    for job, folder in zip(job_in_ptr, folder_in_ptr):
        job = job.replace('\n', '')
        folder = folder.replace('\n', '')
        write_job = False

        #Check if folder exists
        folder_exists = isdir(folder)
        if folder_exists:
            chdir(folder)
            #Checks if python and output file exist
            py_exists = exists('{}.py'.format(job))
            out_exists = exists('{}.out'.format(job))
            if py_exists:
                if out_exists:
                    if 'Completed {}.py'.format(job) not in open('{}.out'.format(job), 'r').read():
                        print '{}\t{}.py at {} did not complete. Adding to job_out paths.'.format(i, job, folder)
                        write_job = True
                else:
                    if write_all:
                        print '{}\tFound {}.py but not {}.out at {}. Adding job to job_out paths.'.format(i, job, job, folder)
                        write_job = True
                    else:
                        warn('Found {}.py but not {}.out at {}'.format(job, job, folder))
            else:
                warn('Job {} does not exist at path {}.'.format(job, folder))
        else:
            warn('Path {} does not exist.'.format(folder))
        #Write job and folder to the output file if it started but did not complete
        #or if write_all is set to True and the job did not start.
        if write_job:
            job_out_ptr.write('{}\n'.format(job))
            folder_out_ptr.write('{}\n'.format(folder))
            i += 1
        chdir(home_dir)
